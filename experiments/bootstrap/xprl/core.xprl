(def second
  (fn [coll]
    (first (rest coll))))

(def defn
  "a docstring!"
  (macro [name args body]
         (list def name
               (list (quote fn) name args body))))

(def when
  (macro [p body]
    (list (quote if) p body)))

(defn map [f]
  (fn [xs]
    (when (not (empty? xs))
      (recur (emit default (f (first xs))) (rest xs)))))

(defn reduce [f]
  (fn [acc xs]
    (if (empty? xs)
      acc
      (recur (f acc (first xs)) (rest xs)))))

(defn harmonic-mean [xs]
  (match (first (ground (happy-path xs)))
    [:zero _]         0
    [default [0 _]]   0
    [default [n sum]] (/ n sum)))

(defn invert [x]
  (if (= 0 x)
    (emit :zero true)
    (/ 1 x)))

(defn count-and-sum [acc x]
  [(+ 1 (first acc)) (+ x (first (rest acc)))])

(defn happy-path [xs]
  (reduce count-and-sum [0 0] (map invert xs)))
