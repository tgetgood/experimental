(defmacro eval [env form]
  form)

(defmacro eval [env ^Cable ch]
  (first (default ch)))

(defmacro eval [env ^List form]
  (if (empty? form)
    form
    (apply env (first form) (rest form))))

(defmacro apply [env ^Fn f args]
  )

;;;;; The core language

(defmacro true [_ x y] x)
(defmacro false [_ x y] y)
(defmacro if [env p x y] ((eval env p) env x y))

;; The following are circular, but once you break the cycle with an initial
;; builtin, you have a structure which holds itself up.

;; TODO: metadata (docstring, file location, etc.)
(defmacro def [env [name body]]
  ;; `def` is local. This is similar in spirit to throw or longjmp and tells
  ;; something up the chain that a new name has been declared. Nothing has to do
  ;; anything about that, but if it hits a top level loop (repl) it can change
  ;; the environment with which it recursively reenters itself.
  (emit :env (extend env name (eval env body))))

(def defmacro
  (macro [_ name & rest]
    (list 'def name (list 'macro rest))))

(defmacro macro [env args body]
  ^Macro {:env env :slots args :body body})

(defmacro fn [env args body]
  ^Fn {:env env :slots args :body body})

(defmacro defn [name args body]
  (list 'def name (list 'fn name args body)))
