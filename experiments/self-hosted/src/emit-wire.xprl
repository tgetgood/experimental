(ns xprl.core) ; versions? where we're going we don't need versions.

;; so far we've figured out via Steele that function application is just
;; extension of the lexical environment. All you really need to do to evaluate a
;; function is bind the passed arguments to the formal parameters and then
;; evaluate the body in that new environment. That's quite elegant.
;;
;; But what about continuations? The fact is that functions need to be able to
;; emit different kinds of signals. `quot` and `rem` as the separate return
;; values for `div` is a canonical example. The quotient and remainder are
;; different kinds of quantities; despite the fact that they're both integers,
;; they mean quite different things. The contexts in which the two quantities
;; are intended to be used are not interchangeable.

;; As `emit` is the fundamental primitive message passing mechanism, `wire` is
;; the fundamental primitive message routing mechanism.
;;
;; Remember that units emit messages on named channels --- named by the emitter
;; --- but don't know to whom those messages will be routed (if to anyone).
;;
;; Decoupling the emission of messages from the routing lets invoked units be
;; fully independent within their own execution context, but allows other units
;; higher up the execution hierarchy control where messages go, and thus control
;; lower units. This is based on (my interpretation of) Koestler's idea of
;; holarchy.

;; Examples
;;
;; Let's take the example of computing the harmonic mean of a stream of numbers.
;;
;; The clearest solution to this problem is:

(defn harmonic-mean [xs]
  (if (any? zero? xs)
    0
    (/ (count xs)
       (reduce + (map #(/ 1 %) xs)))))

;; But this makes three passes over the collection (one more if it doesn't store
;; its own length, and one less if the map and fold get fused by the compiler).

;; We can do it in one pass as:

(defn invert [x]
  (if (zero? x)
    (emit :zero true)
    (/ 1 x)))

(defn harmonic-mean [xs]
  (wire [:zero (fn [_] (emit ^:close 0))
         _ (fn [[count sum]] (/ count sum))]
    (reduce (fn [[count sum] x] [(inc count) (+ sum x)]) [0 0] (map invert xs))))

;; (this assumes transducer like map-fold fusion, which is very desirable anyway)

;; I don't like the incidental complexity of this solution. I think we should be
;; able to generate something like it by loop fusions and branch convolution,
;; but I don't want to get into that now.

;; The invert function can "return" values on one of two channels. One is named
;; `:zero`, and the other is unnammed. The (unique) unnamed channel is what the
;; caller sees as the "normal return" path of a function invocation.

;; The normal return is passed up to map, which passes it on to the reduction
;; function which then returns a value. In the `wire` expression, we have a
;; channel named `_` which is my interim name for this "default return channel".

;; If everything takes the happy path, this code works just like it would in
;; clojure, but if there's a zero in the stream of `xs` then we need to not only
;; not invert it, but abort the entire stream computation and return
;; immediately. Well we don't need to, we could invert all non-zero numbers and
;; compute a wrong harmonic mean that we would then throw away, but that's a
;; waste of effort. Not to mention the risk of someone using the nonsense result
;; anyway.

;; When `invert` sees a zero, it emits `true` on the `:zero` channel. Since
;; nothing in between `invert` and `harmonic-mean` intercept messages on this
;; channel, it flows up freely. This is similar to escapes (exceptions) in this
;; case, but in general exceptions are a single thread of control, whereas
;; `wire` expressions over cables can fork into concurrent execution (sometimes
;; you want all messages on different channels to be processed but by different
;; processors).

;; Note on names: I'm using the word `cable` to denote a unit that emits on
;; multiple channels. It's helpful to have the analogy with a bundle of wires,
;; but I don't know how far that analogy will hold.

;; When the message on the `:zero` channel reaches the `wire` expression in
;; `harmonic-mean` it is passed to the connected function which ignores the
;; message --- because in this case the existence of the message is the real
;; message --- and `emit`s the value `0` on the default return channel. This is
;; because `0` is a correct output of the function `harmonic-mean` in this
;; case. It's just a normal return value.

;; The metadata `^:close` passed to `emit` is meant to indicate that this is the
;; last thing this unit will emit. It is a signal to the runtime that the whole
;; operation below this point can be killed and forgotten. It's a similar notion
;; to early return in clojure's reducers.

;; A unit can emit many values to its default return channel. Units that do so
;; are stream generators, `map` being the canonical example. This is why we need
;; an explicit way to close a unit and prevent more results from being
;; generated.

;; Another consideration for `wire` is the fact that units can emit message on
;; channels their callers are unaware of. We don't want java's checked
;; exceptions where orthogonal functionality must be threaded all through your
;; code. So it's critical that `assert` can emit to a channel called
;; `:assertion-failure` and that only units in the hierarchy above who know how
;; to handle such errors have to worry about their existence.

;; As a default there will be a top level error handler that catches these types
;; of errors and panics, but that functionality needs to be pluggable.

;; So channels that are mentioned in a `wire` expression get connected and their
;; messages rerouted, but those which are not mentioned pass on through up the
;; hierarchy until something handles them.

;; That's necessary. I can't get around it. But sometimes it's
;; problematic. Particularly when running untrusted code.
;;
;; The most valuable aspect of holarchic isolation is that you can run untrusted
;; code and let it think it can do what it wants: it actually can't tell that
;; it's in a sandbox, but it is. Viewed from the invoking agent's level, the
;; untrusted code only has exactly those channels to the outside world it was
;; explicitly given. But that means that extra emission channels back out of the
;; sandbox must be isolated.

;; So we need an expression `isolate`, or maybe `ground` which grounds out all
;; wires in a cable by just dumping all messages into /dev/null (effectively).

;; This can be used to sandbox code. Route and use whatever messages you care
;; to, and prevent any others from leaving.

;; Of course you might miss things if you do this. In particular you should
;; handle errors in your dependencies in some way other than by ignoring them.

;; In that light, it's better to isolate a cable by dumping all messages from
;; its channels onto a single catch-all channel whose messages could at least be
;; logged. That way you can know what the units down there are up to, at the
;; very least.

;; The goal of wire/emit is to let us write somewhat idiomatic lisp code that
;; actually creates a message passing (dataflow, sort of) topology and sets a
;; dynamic system in motion. Dataflow languages tend to fail at the point you
;; need complex control, and that's one of the things I'm trying to fix.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; We now have 4 primitives: `emit`, `wire`, `cut`, and `ground`.

;; I believe that those are sufficient, but I won't be surprised if more prove
;; themselves to be necessary.

;; Now with primitives like this, I definitely need a runtime. And I won't be
;; able to bootstrap it directly from llvm-ir, there's simply too much going
;; on.

;; Clojure, as much as I'd love to use it in this instance, is not an
;; appropriate fit here since getting off of the JVM will prove too much for
;; me. So, perhaps back to the julia runtime of last summer.

;; Or, maybe I need to think more carefully about what I mean by a program.

;; Look at the execution model: standard metacircular interpretation builds up a
;; topology over which messages can flow. Eventually messages reach primitives,
;; which are not opaque builtins as is traditional in lisp, but are ways of
;; sending messages to *other interpreters*.

;; That's not entirely well defined, but in essence the primitive is a
;; definition of another interpreter plus an interpreter on which to interpret
;; the definition. So a message passed to a primitive is actually passed to
;; another interpreter which does not exist statically.

;; How the fuck is that supposed to bottom out? I don't know. This is my next
;; frontier.

;; That's a lie. I do know in a very hand wavy sense. The bottom most
;; "interpreter" is the physical circuitry and the bottom most "message" a
;; pattern of electric potentials.

;; The path from xprl code down to electric potentials is both finite and well
;; defined, in some sense of that term. But it's far from clear.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Notice that above there are still some ambiguities between values and streams.

;; Most notably `wire` maps streams to functions. Streams emit zero or more
;; values, but functions expect one. More correct would be for `wire` to link
;; streams to signal transformers, `(map f)` and the like.

;; But, in this case both "streams" (`:zero`, and `_`) emit exactly one
;; value. Well that's not true without `cut` or `(emit ^:close ...)`, that's why
;; I invented that construct.

;; But maybe this extra piece of machinery is actually a sign of my confusion.

;; Without `cut` `invert` will emit a message on `:zero` for each zero in the
;; input collection. There's nothing wrong with that; it's a correct
;; behaviour. But it's wasteful.

;; Ideally we'd pass the buck: `invert` can emit as many messages as it pleases
;; to either channel, but `harmonic-mean` wires both of those channels so that
;; only one message is ever consumed from the cable. It would then be up to the
;; runtime to see that nothing else can ever be read and stop the processing.

(defn happy-path [xs]
  (reduce (fn [[count sum] x] [(inc count) (+ sum x)]) [0 0] (map invert xs)))

(defn harmonic-mean [xs]
  (let [[channel val] (first (ground (happy-path xs)))]
    (case channel
      :zero 0
      _     (/ (first val) (second val))
      (emit :error "This cable should only have 2 channels"))))

;; First observation: we're going to want a match construct.

(defn harmonic-mean [xs]
  (match (first (ground (happy-path xs)))
    [:zero _]        0
    ['_ [count sum]] (/ count sum)
    x                (emit :error {:mesg "This cable should only have 2 channels"
                                   :data x})))

;; so now `harmonic-mean` commissions a cable from the `happy-path` function and
;; grounds it out.

;; `ground` simply interleaves all messages from all channels of a cable in
;; received order. The messages on the grounded wire are pairs of [channel-name
;; value]. Since a cable is produced by a single thread (language semantics!)
;; this is well defined, but unknown statically.

;; Since `harmonic-mean` only ever reads one message off of the ground wire, the
;; runtime will know that `happy-path` should be aborted as soon as it emits its
;; first message.

;; If values were computed lazily, this would be solved. But pure laziness
;; brings with it space time leaks that will destroy a system like this. This
;; structure is quite similar to FRP.

;; So there needs to be a tradeoff between laziness and eagerness which is
;; handled dynamically by the runtime. Anything that doesn't leak can be
;; lazy. That is if an input stream is fixed, then there won't be space leaks,
;; only time (which is less of an issue). And if the system has idle cycles it
;; can start processing things that aren't needed yet. But it must be able to
;; know that a value will eventually be needed.

;; But for event streams, laziness is not an option. Event streams need to be
;; dealt with immediately otherwise responsivity will deteriorate. Most event
;; streams should be heavily filtered as close to the source as possible. That
;; allows a tight loop to just drop most events and route the rest. How the
;; routed messages are dealt with will depend on latency and throughput
;; requirements, as well as message volume.

;; But even when processing eagerly, we're better off buffering and batch
;; processing chunks for the sake of throughput.

;; This is what I've been talking about when I say "hotspot like optimisations
;; in userspace". Though I haven't yet made clear (to myself at least) how the
;; programmer might interact with this as yet nebulous system.
