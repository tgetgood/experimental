;; Namespace xprl.core

{:name    xprl.core
 :imports {}
 ;; These are f-expressions. Some operate on the context of evaulation and
 ;; return a new one, others return vaules. There's confusion embedded here.
 :defs    {fn
           ???

           ns
           (fn [context name imports]
             ;; Curiously `ns` doesn't need to be a special form, it's just
             ;; an fn which emits a new context.
             {:ns {:name name :imports (parse-imports #_punt imports) :defs {}}})

           qualify
           (fn [context name]
             (symbol (:name (:ns context)) name ))

           def
           (fn [context name body]
             (update-in context [:ns :defs] (qualify context fqn) body))

           defn
           (fn [context name args body]
             (def context name (fn args body)))

           resolve-symbol
           (fn [context name]
             (or (get-in context [:defs name]) (get-in context [:imports name])))}}
