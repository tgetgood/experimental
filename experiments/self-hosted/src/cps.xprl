;rmG; CPS version of the core interpreter
(ns xprl.core)
;; Note that `defn` below is the usual `(def ~name (fn ~args ~@body)).
;;
;; But `defm` is more like typical `defmacro`. It receives its arguments
;; unevaluated and may manipulate them as fexprs. Anything defined with `defm`
;; is expected to manually call `eval` on its result (unless you really know
;; that you don't want to). This is still being sorted out.

;; Essentially anything defined with `defn` should do what you expect, but
;; `defm` are reflective operations that take the entire program state and
;; transform it to a new one.
;;
;; That needs a less concise explanation

(defn eval [env form cont]
  ;; My previous idea of sneaking the return into the environment was
  ;; daft. Determining what a form means in a context should have no effect on
  ;; that context. Though of course it often does, in real life, cause us to
  ;; reevaluate our understanding of the form, the context, or both...
  (cont form))

(defn eval [env ^Symbol sym cont]
  ;; something akin to
  ;; The form pointed to by `sym` should have been evaluated before being bound
  ;; into the env.
  (cont (get-in env [:names sym])))

;; Incidental definitions will not be written in CPS
(defn reduce [f, init, coll]
  (if (empty? coll)
    init
    (reduce f (f init (first coll)) (rest coll))))

(defn transduce [xform f to from]
  ;; This isn't quite right because of the lack of mutability in the core
  ;; language. What would be a stateful transducer in clojure will here be a
  ;; stateless function that simultaneously emits values to the next transducer
  ;; and recurs (emits a new next state to itself). Details need to be worked
  ;; out.
  (let [g (xform f)]
    (g (reduce g to from))))

(defn into [to xform from]
  (transduce xform conj to from))

(defn eval [env ^Collection coll cont]
  ;; wave hands
  (cont (into (empty coll) (comp (map (partial eval env)) (map :ret)) coll)))

(defn eval [env ^List form cont]
  ;; Pass the fn and args as sexps to apply
  (apply env (first form) (rest form) cont))

;; We could probably get more efficient code gen by making then and else
;; continuations and jumping directly, but I like the elegance of this approach,
;; we'll see if it makes the cut

(defn true [env then else cont]
  (eval env then cont))

(defn false [env then else cont]
  (eval env else cont))

;; N.B.: We allow polymorphic dispatch on values as well as types. This allows
;; us to add what are effectively keywords to the language without stepping up
;; to a level inaccessible to developers using the language.
;;
;; It should be possible to compile away this indirection most of the time since
;; these literal symbols will be present in the textual source.
(defn apply [env ^(quote xprl.core/if) _ [p-form then else] cont]
  (eval env p-form (fn [pred] (pred env then else cont))))

(defn apply [env ^(quote xprl.core/let) _ [bindings body] cont]
  ;; Note the similarity to function application, but also the difference.
  ;; The computation is fully specified, so why not make a thunk here?
  (eval
   ;; Again we decontinuate when unambiguous.
   (destructuring-bind env (map first bindings) (map second bindings))
   body
   cont))

(defn apply [env ^(quote fn) _ [args body] cont]
  (cont ^Fn {:env  env
             :args args
             :body body}))

(defn apply [env ^Fn f args cont]
  ;; schedule is still to be defined in detail, but in essence we have a global
  ;; work queue with one task runner per logical core, as in any implementation
  ;; of the actor model.
  (schedule ^Thunk {:env (destructuring-bind env (:args f) args)
                    :form (:body f)
                    :cont cont}))

(defn eval [_ ^Thunk t _]
  ;; There's something special here. Thunks ignore the calling environment and
  ;; continuation and so are context free (or perhaps contextually self
  ;; contained).
  (eval (:env t) (:form t) (:cont t)))

;; I'm not sure if try/catch is a construct I want in this language. This is
;; more an exercise.
(defn apply [env ^(quote try) _ [body catch] cont]
  (let [throw ^Fn {:env env
                   :args (first catch)
                   :body (cont (second catch))}]
    (eval (bind env 'throw throw) body cont)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;; Top level hacks

;; The fact is that there are no global variables, but the idea of making the
;; developer write namespaces of code as maps to be read in is going to cause a
;; lot of friction (with me as well).
;;
;; So, `ns` and `def` effect the repl and code reader. The repl is essentially:

(defn repl [env stdin stdout]
  (let [[cursor form] (read env stdin)
        [e' ret]     (eval env form)]
    (emit {stdout ret
           recur  [e' cursor stdout]})))

;; We need apply to be able to modify that `env` value which is passed
;; recursively back to `repl` on each iteration.
;;
;; The problem is that I don't want every invocation of `eval` to have to return
;; a new environment even though the vast majority of invocations will just
;; return it unchanged. This having to thread something all the way through
;; "just in case" is a design problem I've been banging my head on (and not just
;; me, it comes up in all sorts of designs, cf. :before, :after, &c. in CLOS,
;; aspect oriented design, OO in general: smalltalk used encapsulation to hide
;; data in objects until someone wanted it, oh and don't forget monads...).
;;
;; Do I really have a new way of doing this? None of the ones I've seen really
;; do it for me, so I keep looking. If you're going to try, go all the way...

(defn apply [env ^(quote xprl.core/ns) _ [name imports] cont env-cont]
  (-> env
      (merge-imports imports)
      (assoc :current-ns name)
      env-cont))

(defn apply [env ^(quote xprl.core/def) _ [name body] cont env-cont]
  (env-cont (update env bind name (eval env body))))

(defn apply [env ^(quote xprl.core/defn) _ [name args body] cont env-cont]
  ;; Note that `backtick` needs an environment to function since it must resolve
  ;; symbols (resolution is at read time, even when the code isn't read at all).
  (eval env `(def (fn ~args ~body)) cont env-cont))

;; The fact that this is just a one-off hack for top-level evaluation makes me
;; think I'm missing something here. We could just do something like:

(defn apply [env ^(quote xprl.core/def) _ [name body] cont]
  (cont (top-level {:env (update env bind name (eval env body)) :ret name})))

;; and

(defn repl [env stdin stdout]
  (let [[cursor form] (read env stdin)
        result        (eval env form)
        [e' ret-val]  (if (top-leve? result)
                       [(:env result) (:ret result)]
                       [env result])]
    (emit {stdout ret-val
           recur  [e' cursor stdout]})))

;; But that feels like I'm missing an opportunity to see something more general.

;; When you receive a program from elsewhere, it must come with a full context
;; of interpretation (interpreter, dependencies, continuation, ... it must be a
;; fully independent organism) but what is that context of interpretation? Where
;; did *it* come from?

;; During normal execution, the environment is static. Things mean what they
;; mean and you can't change that.
;;
;; What you can do is create a new environment and evaluate *something else*
;; inside of it. This is really what locals and function calling are.

;; So defining a new name at the top level is logically the same as creating a
;; new interpreter with one more thing in the environment and running the repl
;; in that. The prompt will appear the same, but the repl you're typing into
;; will be one higher on the tower.

;; Oh boy, towers! and here I thought we'd gotten away from that.

;; So my last version of `repl` above is just the tail recursive version of "def
;; as the creation of a new interpreter". Hmm...

;; One more sticky point: `eval` itself is (or should be) defined as part of the
;; environment. More precisely, the methods of eval should all exist in the
;; environment. Is it possible to bootstrap a "universal" (I hate that word)
;; evaluator that looks up and steps into other interpreters on demand? That
;; really feels like what I'm going for here.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; There's a close relation between Smith's (3-lisp's) ↑/↓ and backtick/eval. I
;; need to dig deeper into this since it seems that Friedman and Wand really won
;; in the long term and we have arbitrary reflective depth without a tower of
;; interpreters.
;;
;; Or does it only feel that way? I have to admit I don't honestly understand
;; (have no intuition regarding) what it means to operate at a level more than
;; one interpreter above my own code.

(eval env '(+ x y)) -> ↓(+ ↓(resolve env x) ↓(resolve env y))

;; where ↓ indicates that a form is to be interpreted from one level deeper than
;; "here", that is it turn fexprs into code, the opposite ↑ is essentially
;; `quote`.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;; Example evaluations

(transduce (map square) + 0 (range 10))

;; I want to be able to read a list by something like:

(into '() (reduce (partial read env) stdin))

;; Of course that doesn't work, but the idea keeps smacking me.

;; The problem with `fold`, `map`, and the rest of the squiggol crowd is that
;; they all assume that the input signal is already broken down for you. `(map f
;; c)` requires that every member of `c` be of the type `f` expects.

;; But `reduce` in the sense I'm using it is different. Reduce can take an
;; unstructured sequential thing like a stream, a websocket, or a string, and
;; decide for itself where to draw the boundaries. A string tokeniser is a
;; simple example, or a streaming JSON parser.

(defn reduce [f coll]
  (when (seq coll)
    (let [[rest & vals] (f coll)]
      (emit #{(apply collect vals)
              (recur f rest)}))))

;; So reduce taks a function which breaks a chunk off of a collection and calls
;; it repeatedly until the collection is exhausted. It emits all of the chunks
;; as a stream which can then be picked up by transducers or just folded into a
;; different collection.

(fn [f out coll]
  (if (empty? coll)
    out
    (let [[cursor & vals] (f coll)]
      (recur f (fold out conj vals) cursor))))

;; Would be the equivalent, except that it presupposes what we're going to do
;; with the chunks.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;; An example of multiple continuation
;;;;; (multiple value return to multiple locations concurrently)

;; I'm using cps below to make the control flow explicit

(def read-dispatch
  {\( read-list
   \[ read-vector
   \{ read-map
   \# read-indirect
   \" read-string
   \^ read-meta
   ...})

(def indirect-dispatch
  {\{ read-set
   ...})

(defn read [env stdin cont]
  (read-until env :EOS stdin cont))

(defn read-until [env until stdin cont]
  (let [c (first stdin)
        f (get read-dispatch c read-atom)]
    (if (= c until)
      (cont :EOS)
      (f env until stdin cont))))

(defn resolve [env ^string token cont]
  (cond
    (number? token)         (parse-num token cont)
    (starts-with? \: token) (read-keyword token cont)
    :else                   (read-symbol token
                                         (fn [s]
                                           ;; Free variables are a read time
                                           ;; error.  Function parameters aren't
                                           ;; considered free in this sense
                                           ;; REVIEW: What does `assert` do? We
                                           ;; don't have exceptions, errors, or
                                           ;; anything like that yet.
                                           (assert (bound? env s) cont)
                                           (cont s)))))

(defn read-atom [env until stdin cont]
  (split-at
   until stdin
   (fn [[token rest]]
     (resolve
      env token
      (fn [val]
        (cont :stdin rest :form val))))))

;; Observations:

;; 1) We call `cont`, thus poping the return stack, explicitly outside of
;; primitives. We actually do that quite a bit. I need to read Steele's argument
;; again and figure out what I'm misunderstanding.
;;
;; 2) I'm passing keyword args back to `cont` to distinguish return values. We
;; could just say (cont [rest val]), but there's a self-documenting elegance to
;; naming the things returned. It makes it clear that the function is returning
;; multiple *kinds* of things, not just multiple values of the same kind.
;;
;; There's a fundamental difference between `div` which returns a quotient and a
;; remainder, two different kinds of quantities which together define integer
;; division, and `sqrt` which always returns 2 values, both of which are equally
;; solutions to the equation x = y^2 and thus of the same kind.
;;
;; I want to be able to make that distinction explicit. So here we would define

(defn div [x y cont]
  (cont :quot (quot x y) :rem (mod x y))) ; actual impl unimportant

(defn sqrt [x cont]
  (cont :return @(complex-roots x 2)))

;; The syntax @[...] is just a reader macro for `values` in multi value return.


;; Aside from making it easier to keep values in registers as you pass them
;; around, what is this continuation? It's not the traditional lisp functional
;; GOTO. Well it's that but more complicated.

;; `cont` above is the glue that turns a bunch of functions into a program. It's
;; the top down half of the holarchy.

;; Functions are autonomous units when viewed from within. What they do depends
;; only on their arguments. But when viewed from a higher vantage point, they
;; are subordinate, not only because a higher level process controls what
;; arguments they will get, but also what happens to the values they produce.

;; A generator is just

(fn [x cont]
  (cont :return @(lazy-seq ...)))

;; But the real question now is: how do we control where these named returns go?
;; And especially how do we do that without requiring programmers to write CPS
;; code? The latter could be as simple as "everything is `async`, and all calls
;; are `await`, and we just drop that syntax. So let's focus on the former.


(defn repl [env stdin cont]
  (read
   env stdin
   (fn [{:keys [stdin form *err*]}]
     (if *err* (cont :*err* *err*)
         (eval
          env form
          (fn [{:keys [result *err*] :as ev}]
            (if *err*
              (cont :*err* *err*)
              (cont :stdout result
                    :recur [(if (new-env? ev env) (:env ev) env) stdin]))))))))

;; But now `cont` is responsable for recursion of `repl`. A trampoline,
;; basically. Is that progress?

;; A much cleaner solution might be:

(defn repl [call-env stdin cont]
  (read
   env stdin)
  (extend cont
    (fn [{:keys [stdin form]}]
      (eval
       env form
       (extend cont
         (fn [{:keys [env result]}
              (cont :stdout result
                    :recur [(or env call-env) stdin])]))))))

;; Where `extend` adds a new method to the continuation. This new method is the
;; one that the immediate caller expects the function to return to. But `cont`
;; also has an `error` return which it inherits from above unless overridden, so
;; that `assert` can abort correctly without the intervening functions having to
;; manage it. Of course they can override to catch the error and recover.

;; At the compiler level, the last `cont` invocation would break into something
;; like:

(emit {:stdout result
       :recur [...]})

;; which in turn becomes

(schedule ^Thunk {:env (bind env 'x result)
                  :form '(emit *stdout* (str x))
                  :cont halt}

          ^Thunk {:env  (bind env
                             'call-env (or env call-env)
                             'stdin stdin)
                  :form '(repl call-env stdin)
                  :cont scheduler})

;; Which sets two coroutines going concurrently, one of which prints and halts,
;; and the other loops by using the scheduler as a trampoline.

;; This `schedule` needs, at the very least, a thread-local mutable variable to
;; maintain the task queue. We can use work stealing to prevent needing true
;; global variables. Maybe, needs thought.

;; `(emit *stdout* x)` is redundant but included here for clarity. How the
;; "channel" (for lack of a better term) `*stdout*` is connected to the outside
;; world is beyond the control of the user program as a whole. Unix (or
;; whichever OS) decides what stdout is, and how programs interact with it. The
;; hope is that we can wrap the OS semantics closely enough so that userspace
;; programs can interact with pipes in the usual manner, but by isolating it
;; like this you can call a sub-program and *not pass it stdout* which means it
;; has no way to interact with that pipe. A program controls which syscalls are
;; available to its subprograms, thus providing (hopefully) robust
;; sandboxing. We'll see where that goes.

;; Next steps: What should the surface level syntax look like? How do you
;; manipulate the top down control pattern as you call functions? Callbacks are
;; terrible for simplicity and comprehension.

;; One problem here is names. A function returns to entities based on names that
;; are local to that process. That, in turn, means that the invoking function,
;; which chooses what those names mean *must know what those names are*, which
;; is problematic. I don't want that information to clutter up the entire
;; system, most of the time a function that calls another doesn't need to know
;; what it called its standard return pointer, only that it be set to a point
;; determined by the caller.
;;
;; Conventional names could solve this... `:return:`, `:error:`, &c., but that's
;; not a great solution. Standard names bind us to one choice of (human)
;; language, one choice of character encoding, &c..
;;
;; Could we use standard references (gensyms, hashes, normalised locals,
;; something unique and arbitrary) and alias those to the names in the code?
;; That would go along with the general environmental design that all binding is
;; giving a new (or another) name to an existing ~value~. The goal is to get
;; away from names as much as possible internally. Names are metadata for
;; humans, not compilers.

;; On the flip side, if you don't understand how a function that you're invoking
;; will pass values/control onwards, you're probably using it incorrectly.

;; So maybe something like:

(defn repl [e s]
  (let [{:keys [stdin form]} (read e s)
        {:keys [env val]}    (eval e form)
        e'                   (if (top-level? val) env e)]
    (emit {(:stdout (:system e)) val
           (:recur e) [e' stdin]})))

;; N.B.: `read` and `eval` only return normally from the point of view of
;; `repl`. In fact, either one could signal an error, in which case `repl` will
;; never regain control and the error handler in the calling environment will be
;; invoked.
;;
;; It's a nice feature that `repl` doesn't have to account for control flow that
;; bypasses its normal execution.

;; `emit` is the magic word here. How the hell does `emit` work?
;;
;; Both `(:stdout (:system e))` and `(:recur e)` are continuation like things
;; that get passed in by the caller as part of the environment. As is
;; `(:assertion-error e)`, or whatever we're deciding to call that convention.

(defn main
  "Default entry point to start a repl."
  [io]
  (let [env   (assoc (default-env) :system (select-keys io [:stdout]))
        stdin (:stdin io)]
    (with-continuations env
      [recur (fn [env stdin] (repl env stdin))
       assertion-error       (fn [e]
                               (with-continuations env
                                 [return (:panic (:system io))]
                                 (emit env {(:stderr (:system io)) e})))]
      (repl env stdin))))

;; Note that `stdin` is not passed as a continuation from io to the
;; environment. This should prevent the user process from writing to `stdin`,
;; which is desirable since from this program's point of view it's read only.

;; But now `stdin` and `stdout` are two different kinds of objects. Or maybe
;; it's better to say that they get different ends of the pipes. How does one
;; distinguish? What happens if someone tries to emit to `stdin`? What if they
;; try to read from `stdout`?

;; Note that for this to work correctly, `emit` does not invoke its arguments,
;; but schedules their invocation. Thus the continuations are invoked
;; concurrently, but the parallelism depends on the hardware and load.
;;
;; `emit` must produce thunks, so it must be passed an environment and a form
;; which is fully defined by that environment. By default we can use the calling
;; environment. This should work in general since binding is lexical.

;; With this in mind, let's try and write everything we need for the repl to see
;; if this makes sense. If we find ourselves overriding continuations
;; frequently, then something is wrong.

;; Note also: values bound in the environment are lexically scoped, but
;; continuations bound in the environment are dynamically scoped. This seems
;; natural since the programmer decides what a function does (what the symbols
;; in it mean) but a higher level system (generally at runtime) decides how
;; functions are woven together into a program. We'll see how this plays out
;; though.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Ordering of messages

;; Above, I'm assuming that messages delivered to different continuations so
;; delivered concurrently. But I'm implicitly assuming that mulitple messages
;; delivered to the same continuation are done so exactly once and in order.
;;
;; This is necessary if we're going to model sequential processing (squiggol,
;; transducers, dataflow, call it what you will.).
;;
(defn apply [env ^Fn f args _]
  (let [argvals (into [] (map (comp :form (partial eval env))) args)]
    (eval _ ^Thunk {:env  (bind env (:args f) argvals)
                    :body f
                    :cont cont}
          _)))

;; It is correct for `map` to run the transform `(comp :form (partial eval
;; env))` on each argument in parallel. There are no side effects (except for
;; scheduling new work) so the order doesn't matter.
;;
;; But the order in which they are inserted into the collection to be returned
;; is very important. The binding of that return collection to the arguments of
;; `f` determines the meaning of this invocation of `f`.
;;
;; For the order not to matter, the reducing function (in this case `conj`)
;; would need to be both associative and commutative.
;; ---
;; Binary operators should have metadata declaring them commutative,
;; associative, monoids operations, group operations, etc. It gets a little
;; complicated since the notion of algebra is a combination of set and
;; operation. Maybe just metadata of the form

(defn + [a b]
  ^{:associative true
    :commutative true
    :identity    0
    :inverse     -}
  ;; primitive implementation
  )

;; Note that this will require that we define `+` and `-` together since
;; otherwise one would have to refer to something that did not exist at the time
;; of its creation.
;;
;; They are a twinned phenomenon, but that's not how they occurred to us in the
;; first place.
;;
;; The phenomenon is really more subtle. We have independent notions of addition
;; and subtraction, and then when we discover "groupness" those old notions of
;; addition and subtraction take on new meaning. They aren't quite the same `+`
;; and `-` that they were before we saw the connection.

(defn primitive/+ [a b]
  ;; impl
  )

(defn primitive/- [a b]
  ;; impl
  )

(defn + [a b]
  ^{:associative true
    :commutative true
    :identity    0
    :inverse     -}
  (primitive/+ a b))

(defn - [a b]
  ^{:associative    false
    :commutative    false
    :right-identity 0
    :inverse        +}
  (primitive/- a b))

;; Of course it would be better if we viewed subtraction as the addition of a
;; negative number (then we're still in the same group with all its nice
;; properties), but that's a special case we're not interested in for the
;; moment.

(defn map [f]
  (fn [cont]
    (fn [x]
      (cont (f x)))))

(into [] (map f) xs)

=> (transduce (map f) conj [] xs)

=> (reduce (fn [acc x] (((map f) (partial conj acc)) x)) [] xs)

;; N.B.: this isn't the traditional clojure reduce/transduce, since I'm not
;; allowing the signal processor access to the result stream. That would allow
;; processes to modify history, which has ugly ramifications.

;; What we want `(map f xs) to mean is

(eval env '(map f xs))
=>
(emit (f @xs))
=>
(schedule @(map #(^Thunk {:env (bind env 'x (eval env %))
                          :form (f x)
                          :cont ???})))

;; the continuation from the thunks would have to number them and make sure that
;; they continue on to the next step in order after being processed (possibly in
;; parallel).

;; Ugh this is getting mushy.

;; We need some sort of sub-scheduling
